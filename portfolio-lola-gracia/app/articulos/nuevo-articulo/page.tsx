'use client';

import { useEditorContext } from '@/context/editorContext';
import {
  Button,
  Container,
  Paper,
  TextInput,
  Title,
  Notification,
  Group,
} from '@mantine/core';
import dynamic from 'next/dynamic';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { IconCheck, IconBrandTwitter } from '@tabler/icons-react';

const TiptapEditor = dynamic(() => import('../components/texteditor'), { ssr: false });



//Se usara para convertir en negrita en los posts de twitter
const boldCharMap: { [key: string]: string } = {
  a: 'ùóÆ', b: 'ùóØ', c: 'ùó∞', d: 'ùó±', e: 'ùó≤', f: 'ùó≥',
  g: 'ùó¥', h: 'ùóµ', i: 'ùó∂', j: 'ùó∑', k: 'ùó∏', l: 'ùóπ',
  m: 'ùó∫', n: 'ùóª', o: 'ùóº', p: 'ùóΩ', q: 'ùóæ', r: 'ùóø',
  s: 'ùòÄ', t: 'ùòÅ', u: 'ùòÇ', v: 'ùòÉ', w: 'ùòÑ', x: 'ùòÖ',
  y: 'ùòÜ', z: 'ùòá',
  A: 'ùóî', B: 'ùóï', C: 'ùóñ', D: 'ùóó', E: 'ùóò', F: 'ùóô',
  G: 'ùóö', H: 'ùóõ', I: 'ùóú', J: 'ùóù', K: 'ùóû', L: 'ùóü',
  M: 'ùó†', N: 'ùó°', O: 'ùó¢', P: 'ùó£', Q: 'ùó§', R: 'ùó•',
  S: 'ùó¶', T: 'ùóß', U: 'ùó®', V: 'ùó©', W: 'ùó™', X: 'ùó´',
  Y: 'ùó¨', Z: 'ùó≠',
};
//Se convertira en cursiva
const italicCharMap: { [key: string]: string } = {
  a: 'ùò¢', b: 'ùò£', c: 'ùò§', d: 'ùò•', e: 'ùò¶', f: 'ùòß',
  g: 'ùò®', h: 'ùò©', i: 'ùò™', j: 'ùò´', k: 'ùò¨', l: 'ùò≠',
  m: 'ùòÆ', n: 'ùòØ', o: 'ùò∞', p: 'ùò±', q: 'ùò≤', r: 'ùò≥',
  s: 'ùò¥', t: 'ùòµ', u: 'ùò∂', v: 'ùò∑', w: 'ùò∏', x: 'ùòπ',
  y: 'ùò∫', z: 'ùòª',
  A: 'ùòà', B: 'ùòâ', C: 'ùòä', D: 'ùòã', E: 'ùòå', F: 'ùòç',
  G: 'ùòé', H: 'ùòè', I: 'ùòê', J: 'ùòë', K: 'ùòí', L: 'ùòì',
  M: 'ùòî', N: 'ùòï', O: 'ùòñ', P: 'ùòó', Q: 'ùòò', R: 'ùòô',
  S: 'ùòö', T: 'ùòõ', U: 'ùòú', V: 'ùòù', W: 'ùòû', X: 'ùòü',
  Y: 'ùò†', Z: 'ùò°',
};


//Convierte el texto en negrita o en cursiva a formtato usable en twitter
function parseRichText(node: HTMLElement): string {
  let text = '';

  node.childNodes.forEach(child => {
    if (child.nodeType === Node.TEXT_NODE) {
      text += child.textContent;
    } else if (child.nodeType === Node.ELEMENT_NODE) {
      const el = child as HTMLElement;
      const inner = parseRichText(el);

      switch (el.tagName) {
        case 'STRONG':
          text += toBold(inner);
          break;
        case 'EM':
          text += toItalic(inner);
          break;
        default:
          text += inner;
      }
    }
  });

  return text;
}

function toBold(text: string): string {
  return text.replace(/./g, c => boldCharMap[c] || c);
}

function toItalic(text: string): string {
  return text.replace(/./g, c => italicCharMap[c] || c);
}

export default function EditorPage() {
  const { editor } = useEditorContext();
  const [title, setTitle] = useState('');
  const [success, setSuccess] = useState(false);
  const router = useRouter();

  const handleSave = async () => {
    const htmlContent = editor?.getHTML() || '';
    const slug = title.trim().replaceAll(' ', '-');

    if (!htmlContent || !title) {
      alert('Por favor introduce un t√≠tulo y texto.');
      return;
    }

    const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_ADDRESS}articles/save`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({ content: htmlContent, title, slug }),
    });

    if (!response.ok) {
      alert('Se ha producido un error');
    } else {
      setSuccess(true);
      setTimeout(() => {
        router.push('./');
      }, 1500);
    }
  };
  

const handleTweet = () => {
  const html = editor?.getHTML() || '';

  // Convierte el texto html de contenido a texto enriquecido compatible con twitter
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, 'text/html');
  const elements = doc.body.childNodes;

  let result = '';

  elements.forEach((el) => {
    if (el.nodeType === Node.ELEMENT_NODE) {
      const node = el as HTMLElement;

      switch (node.tagName) {
        //A√±ade los espacios correspondientes a los parrafos
        case 'P':
          result += parseRichText(node) + '\n\n';
          break;
                  //A√±ade el iconito de bullet point en las listas desordenadas
        case 'UL':
          node.querySelectorAll('li').forEach(li => {
            result += `‚Ä¢ ${parseRichText(li)}\n`;
          });
          result += '\n';
          break;
          //a√±ade los numeros a laslistas ordenadas
        case 'OL':
          node.querySelectorAll('li').forEach((li, i) => {
            result += `${i + 1}. ${parseRichText(li)}\n`;
          });
          result += '\n';
          break;
        default:
          result += parseRichText(node) + '\n\n';
      }
    }
  });

  const tweetText = encodeURIComponent(result.slice(0, 280));
  const tweetUrl = `https://twitter.com/intent/tweet?text=${tweetText}`;
  window.open(tweetUrl, '_blank');
};


  return (
    <Container size="md" py="xl">
      <Paper shadow="sm" radius="md" p="lg" withBorder>
        <Title order={2} mb="lg" ta="center">
          Crear nuevo art√≠culo
        </Title>

        <TextInput
          label="T√≠tulo"
          placeholder="Introduce un t√≠tulo atractivo"
          value={title}
          onChange={(e) => setTitle(e.currentTarget.value)}
          mb="md"
          withAsterisk
        />

        <div
          id="editorWrapper"
          style={{
            minHeight: '300px',
            maxHeight: 'auto',
            overflow: 'auto',
            padding: '1rem',
            border: '1px solid #ced4da',
            borderRadius: '8px',
            backgroundColor: '#fff',
          }}
        >
          <TiptapEditor />
        </div>

        <Group justify="space-between" mt="xl">
          <Button leftSection={<IconBrandTwitter size={18} />} onClick={handleTweet} variant="light" color="blue" title="We're still not calling it X, you manchild">
            Tuitear contenido
          </Button>

          <Button onClick={handleSave} color="teal">
            Guardar art√≠culo
          </Button>
        </Group>
      </Paper>

      {success && (
        <Notification
          icon={<IconCheck size={18} />}
          color="teal"
          title="√âxito"
          mt="md"
          onClose={() => setSuccess(false)}
        >
          Art√≠culo creado con √©xito
        </Notification>
      )}
    </Container>
  );
}
